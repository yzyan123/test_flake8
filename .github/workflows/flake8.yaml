name: flake8  # 工作流的名称

on:
  push:  # 定义在 Push 事件时触发工作流
    branches:
      - main  # 监听 main 分支的推送事件

jobs:
  python-formatting:  # 第一个作业名称为 python-formatting
    runs-on: ubuntu-latest  # 在 Ubuntu 最新版本环境下运行作业
    steps:
      - name: Checkout  # 步骤1: 检出代码
        uses: actions/checkout@v4

      - name: Setup Python  # 步骤2: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: 3.9  # 指定 Python 版本为 3.9

      - name: Install flake8  # 步骤3: 安装 flake8
        run: pip install flake8

      - name: Determine changed files  # 步骤4: 确定更改的文件
        id: changed-files
        run: echo "::set-output name=files::$(git diff --name-only HEAD^)"

      - name: Run flake8  # 步骤5: 运行 flake8 校验
        run: |
          echo "Running flake8 on changed files..."
          flake8 --config=.flake8 ${{ steps.changed-files.outputs.files }} > flake8.log || echo "flake8 found issues"

      - name: View flake8 output  # 输出 flake8 结果以便查看
        run: cat flake8.log  # 假设你将 flake8 输出重定向到了 flake8.log 文件中

      - name: Check for flake8 issues  # 步骤6: 检查是否有 flake8 问题
        id: check-flake8
        run: echo ${{ steps.changed-files.outputs.files }} | grep -q . && exit 1 || exit 0

      - name: Prevent push on issues  # 步骤7: 防止提交包含问题的代码
        if: ${{ steps.check-flake8.outcome == 'failure' }}
        run: |
          echo "::error::flake8 found issues. Please fix them before pushing."
          exit 1



  # run-unit-tests:  # 第二个作业名称为 run-unit-tests
  #   needs: python-formatting  # 需要等待 python-formatting 作业完成后再执行
  #   runs-on: ubuntu-latest  # 在 Ubuntu 最新版本环境下运行作业
  #   steps:
  #     - name: Checkout  # 步骤1: 检出代码
  #       uses: actions/checkout@v4

  #     - name: Setup Python  # 步骤2: 设置 Python 环境
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9  # 指定 Python 版本为 3.9

  #     - name: Install flask  # 步骤3: 安装 Flask
  #       run: pip install flask

  #     - name: Install requests  # 步骤4: 安装 requests
  #       run: pip install requests

  #     - name: Install pytest  # 步骤5: 安装 pytest
  #       run: pip install pytest

      # - name: Run Unit Tests  # 步骤6: 运行单元测试
      #   run: pytest api/*.py  # 运行 api 目录下的所有 .py 文件中的单元测试

  # deploy-to-vercel:  # 第三个作业名称为 deploy-to-vercel
  #   needs: run-unit-tests  # 需要等待 run-unit-tests 作业完成后再执行
  #   runs-on: ubuntu-latest  # 在 Ubuntu 最新版本环境下运行作业
  #   steps:
  #     - name: Checkout  # 步骤1: 检出代码
  #       uses: actions/checkout@v4

  #     - name: Deploy to Vercel  # 步骤2: 部署到 Vercel
  #       uses: amondnet/vercel-action@v20
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}  # 从 Secrets 中获取 Vercel Token
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}  # 从 Secrets 中获取 Vercel 组织 ID
  #         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}  # 从 Secrets 中获取 Vercel 项目 ID
  #         vercel-args: '--prod'  # 部署到生产环境
